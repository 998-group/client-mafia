import React, { useState, useEffect } from 'react';
import { Crown, Shield, Eye, Zap, Gem, Star, Heart } from 'lucide-react';

// –ú–æ–∫-—Ö—É–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ö—É–∫)
const useCoins = () => ({
  coins: 500,
  deductCoins: async (amount) => {
    console.log(`Deducting ${amount} coins`);
    return true;
  },
  loading: false
});

// –ú–æ–∫-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è toast (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é)
const toast = {
  success: (msg) => console.log('Success:', msg),
  error: (msg) => console.log('Error:', msg),
  warning: (msg) => console.log('Warning:', msg),
  info: (msg) => console.log('Info:', msg)
};

const Shop = () => {
  const { coins, deductCoins, loading } = useCoins();
  const [purchasedItems, setPurchasedItems] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('roles');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  useEffect(() => {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage –∏–ª–∏ API
    setPurchasedItems([]); // –ü—Ä–∏–º–µ—Ä –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  }, []);

  const categories = [
    { id: 'roles', name: '–†–æ–ª–∏', icon: <Crown className="w-5 h-5" />, color: 'text-warning' },
    { id: 'abilities', name: '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏', icon: <Zap className="w-5 h-5" />, color: 'text-info' },
    { id: 'cosmetics', name: '–ö–æ—Å–º–µ—Ç–∏–∫–∞', icon: <Gem className="w-5 h-5" />, color: 'text-secondary' },
    { id: 'boosters', name: '–ë—É—Å—Ç–µ—Ä—ã', icon: <Star className="w-5 h-5" />, color: 'text-accent' }
  ];

  const shopItems = {
    roles: [
      {
        id: 'detective',
        name: '–î–µ—Ç–µ–∫—Ç–∏–≤',
        description: '–ú–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∑–∞ –Ω–æ—á—å',
        price: 150,
        icon: <Eye className="w-8 h-8" />,
        rarity: 'rare',
        type: 'role'
      },
      {
        id: 'doctor',
        name: '–î–æ–∫—Ç–æ—Ä',
        description: '–ú–æ–∂–µ—Ç —Å–ø–∞—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Ç —É–±–∏–π—Å—Ç–≤–∞',
        price: 200,
        icon: <Heart className="w-8 h-8" />,
        rarity: 'epic',
        type: 'role'
      },
      {
        id: 'bodyguard',
        name: '–¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å',
        description: '–ó–∞—â–∏—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, —É–º–∏—Ä–∞—è –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ',
        price: 250,
        icon: <Shield className="w-8 h-8" />,
        rarity: 'epic',
        type: 'role'
      },
      {
        id: 'psychic',
        name: '–≠–∫—Å—Ç—Ä–∞—Å–µ–Ω—Å',
        description: '–í–∏–¥–∏—Ç —Ä–æ–ª–∏ —É–±–∏—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
        price: 300,
        icon: <Star className="w-8 h-8" />,
        rarity: 'legendary',
        type: 'role'
      },
      {
        id: 'sheriff',
        name: '–®–µ—Ä–∏—Ñ',
        description: '–ú–æ–∂–µ—Ç —É–±–∏—Ç—å –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ –Ω–æ—á—å—é',
        price: 280,
        icon: <Shield className="w-8 h-8" />,
        rarity: 'epic',
        type: 'role'
      },
      {
        id: 'medium',
        name: '–ú–µ–¥–∏—É–º',
        description: '–û–±—â–∞–µ—Ç—Å—è —Å –º–µ—Ä—Ç–≤—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏',
        price: 220,
        icon: <Eye className="w-8 h-8" />,
        rarity: 'rare',
        type: 'role'
      }
    ],
    abilities: [
      {
        id: 'extra_vote',
        name: '–î–≤–æ–π–Ω–æ–π –≥–æ–ª–æ—Å',
        description: '–í–∞—à –≥–æ–ª–æ—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ –¥–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è',
        price: 100,
        icon: <Shield className="w-8 h-8" />,
        rarity: 'common',
        type: 'ability'
      },
      {
        id: 'night_vision',
        name: '–ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ',
        description: '–í–∏–¥–∏—Ç–µ –∫—Ç–æ –∫–æ–≥–æ –ø–æ—Å–µ—â–∞–µ—Ç –Ω–æ—á—å—é',
        price: 180,
        icon: <Eye className="w-8 h-8" />,
        rarity: 'rare',
        type: 'ability'
      },
      {
        id: 'silence',
        name: '–ó–∞—Ç–∫–Ω—É—Ç—å —Ä–æ—Ç',
        description: '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∏–≥—Ä–æ–∫—É –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å',
        price: 120,
        icon: <Zap className="w-8 h-8" />,
        rarity: 'common',
        type: 'ability'
      },
      {
        id: 'reveal',
        name: '–†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ',
        description: '–£–∑–Ω–∞—Ç—å —Ä–æ–ª—å –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ)',
        price: 350,
        icon: <Star className="w-8 h-8" />,
        rarity: 'legendary',
        type: 'ability'
      }
    ],
    cosmetics: [
      {
        id: 'golden_name',
        name: '–ó–æ–ª–æ—Ç–æ–µ –∏–º—è',
        description: '–í–∞—à–µ –∏–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∑–æ–ª–æ—Ç—ã–º —Ü–≤–µ—Ç–æ–º',
        price: 80,
        icon: <Crown className="w-8 h-8" />,
        rarity: 'common',
        type: 'cosmetic'
      },
      {
        id: 'diamond_badge',
        name: '–ê–ª–º–∞–∑–Ω—ã–π –∑–Ω–∞—á–æ–∫',
        description: '–ö—Ä–∞—Å–∏–≤—ã–π –∑–Ω–∞—á–æ–∫ —Ä—è–¥–æ–º —Å –∏–º–µ–Ω–µ–º',
        price: 150,
        icon: <Gem className="w-8 h-8" />,
        rarity: 'rare',
        type: 'cosmetic'
      },
      {
        id: 'custom_title',
        name: '–û—Å–æ–±–æ–µ –∑–≤–∞–Ω–∏–µ',
        description: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–≤–∞–Ω–∏–µ',
        price: 200,
        icon: <Star className="w-8 h-8" />,
        rarity: 'epic',
        type: 'cosmetic'
      }
    ],
    boosters: [
      {
        id: 'score_boost',
        name: '–ë—É—Å—Ç–µ—Ä –æ—á–∫–æ–≤',
        description: '+50% –æ—á–∫–æ–≤ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ 5 –∏–≥—Ä',
        price: 100,
        icon: <Zap className="w-8 h-8" />,
        rarity: 'common',
        type: 'booster'
      },
      {
        id: 'win_streak',
        name: '–°–µ—Ä–∏—è –ø–æ–±–µ–¥',
        description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –ø–æ–±–µ–¥–Ω—ã–µ —Å–µ—Ä–∏–∏',
        price: 150,
        icon: <Star className="w-8 h-8" />,
        rarity: 'rare',
        type: 'booster'
      }
    ]
  };

  const getRarityStyles = (rarity) => {
    switch (rarity) {
      case 'common': return { 
        cardClass: 'border-gray-300 bg-gray-50 hover:bg-gray-100',
        badgeClass: 'badge-neutral',
        iconBg: 'bg-gray-200 text-gray-600'
      };
      case 'rare': return { 
        cardClass: 'border-blue-300 bg-blue-50 hover:bg-blue-100',
        badgeClass: 'badge-info',
        iconBg: 'bg-blue-200 text-blue-600'
      };
      case 'epic': return { 
        cardClass: 'border-purple-300 bg-purple-50 hover:bg-purple-100',
        badgeClass: 'badge-secondary',
        iconBg: 'bg-purple-200 text-purple-600'
      };
      case 'legendary': return { 
        cardClass: 'border-yellow-300 bg-yellow-50 hover:bg-yellow-100',
        badgeClass: 'badge-warning',
        iconBg: 'bg-yellow-200 text-yellow-600'
      };
      default: return { 
        cardClass: 'border-gray-300 bg-gray-50 hover:bg-gray-100',
        badgeClass: 'badge-neutral',
        iconBg: 'bg-gray-200 text-gray-600'
      };
    }
  };

  const getRarityName = (rarity) => {
    switch (rarity) {
      case 'common': return '–û–±—ã—á–Ω—ã–π';
      case 'rare': return '–†–µ–¥–∫–∏–π';
      case 'epic': return '–≠–ø–∏—á–µ—Å–∫–∏–π';
      case 'legendary': return '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π';
      default: return '–û–±—ã—á–Ω—ã–π';
    }
  };

  const purchaseItem = async (item) => {
    if (loading) {
      toast.info('–ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏...');
      return;
    }
  
    if (!item || typeof item.price !== 'number') {
      toast.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞');
      return;
    }
  
    if (typeof coins !== 'number' || coins < item.price) {
      toast.error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${item.price}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${coins}`);
      return;
    }
  
    if (purchasedItems.includes(item.id)) {
      toast.warning(`${item.name} —É–∂–µ –∫—É–ø–ª–µ–Ω!`);
      return;
    }
  
    try {
      const success = await deductCoins(item.price);
      
      if (!success) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –∫–æ–∏–Ω—ã');
      }
  
      setPurchasedItems(prevItems => {
        const updatedItems = [...prevItems, item.id];
        return updatedItems;
      });
  
      toast.success(`–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! ${item.name} –∑–∞ ${item.price} –∫–æ–∏–Ω–æ–≤`);
  
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', error);
      toast.error(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <span className="loading loading-spinner loading-lg text-primary"></span>
      </div>
    );
  }

  return (
    <div className="p-4 h-full overflow-y-auto">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å—Ç–∏–ª–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ */}
      <div className="bg-gradient-to-r from-purple-600 via-pink-600 to-red-600 text-white rounded-xl shadow-xl mb-6">
        <div className="flex items-center justify-center gap-4 h-20 px-6">
          <div className="text-4xl animate-bounce">üõçÔ∏è</div>
          <div className="text-center">
            <h1 className="text-2xl font-bold">–ú–∞–≥–∞–∑–∏–Ω –ú–∞—Ñ–∏–∏</h1>
            <p className="text-sm opacity-90">Shop & Upgrades</p>
          </div>
        </div>
      </div>

      {/* –ë–∞–ª–∞–Ω—Å –∫–æ–∏–Ω–æ–≤ */}
      <div className="alert alert-info mb-6 shadow-lg">
        <div className="flex items-center justify-between w-full">
          <div className="flex items-center gap-3">
            <Gem className="w-6 h-6 animate-pulse" />
            <div>
              <h3 className="font-bold">–í–∞—à –±–∞–ª–∞–Ω—Å</h3>
              <div className="text-xs opacity-75">–ö–æ–∏–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ</div>
            </div>
          </div>
          <div className="text-2xl font-bold">{coins}</div>
        </div>
      </div>

      {/* –¢–∞–±—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      <div className="tabs tabs-boxed mb-6 bg-base-200">
        {categories.map(category => (
          <a
            key={category.id}
            className={`tab flex items-center gap-2 ${
              selectedCategory === category.id ? 'tab-active' : ''
            }`}
            onClick={() => setSelectedCategory(category.id)}
          >
            <span className={category.color}>{category.icon}</span>
            <span className="hidden sm:inline">{category.name}</span>
          </a>
        ))}
      </div>

      {/* –°–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ */}
      <div className="grid grid-cols-2 gap-4">
        {shopItems[selectedCategory]?.map(item => {
          const isPurchased = purchasedItems.includes(item.id);
          const canAfford = coins >= item.price;
          const styles = getRarityStyles(item.rarity);
          
          return (
            <div 
              key={item.id} 
              className={`card bg-base-100 shadow-lg border-2 transition-all duration-300 hover:shadow-xl ${styles.cardClass} ${
                isPurchased ? 'opacity-70' : ''
              }`}
            >
              <div className="card-body p-4">
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <div className="flex items-start justify-between mb-3">
                  <div className={`p-2 rounded-lg ${styles.iconBg}`}>
                    {item.icon}
                  </div>
                  {isPurchased && (
                    <div className="badge badge-success gap-1">
                      <Star className="w-3 h-3" />
                      –ö—É–ø–ª–µ–Ω–æ
                    </div>
                  )}
                </div>
                
                {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
                <h2 className="card-title text-base">{item.name}</h2>
                <p className="text-xs text-base-content opacity-70 mb-3 line-clamp-2">
                  {item.description}
                </p>
                
                {/* –†–µ–¥–∫–æ—Å—Ç—å */}
                <div className="flex justify-center mb-3">
                  <div className={`badge ${styles.badgeClass} badge-sm`}>
                    {getRarityName(item.rarity)}
                  </div>
                </div>
                
                {/* –¶–µ–Ω–∞ */}
                <div className="flex items-center justify-center gap-2 bg-base-200 rounded-lg p-2 mb-3">
                  <Gem className="w-4 h-4 text-warning" />
                  <span className="font-bold">{item.price}</span>
                </div>
                
                {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ */}
                <div className="card-actions justify-center">
                  <button 
                    className={`btn btn-sm w-full ${
                      isPurchased 
                        ? 'btn-success btn-disabled' 
                        : canAfford 
                          ? 'btn-primary' 
                          : 'btn-disabled'
                    }`}
                    onClick={() => purchaseItem(item)}
                    disabled={isPurchased || !canAfford}
                  >
                    {isPurchased ? '‚úì –ö—É–ø–ª–µ–Ω–æ' : canAfford ? '–ö—É–ø–∏—Ç—å' : '–ú–∞–ª–æ –∫–æ–∏–Ω–æ–≤'}
                  </button>
                </div>
                
                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ */}
                {(item.rarity === 'epic' || item.rarity === 'legendary') && (
                  <div className="mt-2">
                    <progress 
                      className={`progress w-full h-1 ${
                        item.rarity === 'legendary' ? 'progress-warning' : 'progress-secondary'
                      }`} 
                      value={isPurchased ? 100 : canAfford ? 80 : 40} 
                      max="100"
                    ></progress>
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="stats shadow mt-6 w-full">
        <div className="stat">
          <div className="stat-title">–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</div>
          <div className="stat-value text-lg">{shopItems[selectedCategory]?.length || 0}</div>
        </div>
        
        <div className="stat">
          <div className="stat-title">–ö—É–ø–ª–µ–Ω–æ</div>
          <div className="stat-value text-lg">{purchasedItems.length}</div>
        </div>
        
        <div className="stat">
          <div className="stat-title">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</div>
          <div className="stat-value text-lg">
            {purchasedItems.reduce((total, itemId) => {
              const item = Object.values(shopItems).flat().find(i => i.id === itemId);
              return total + (item?.price || 0);
            }, 0)}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Shop;